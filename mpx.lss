
mpx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001bc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  00800060  00800060  00000250  2**0
                  ALLOC
  3 .noinit       00000000  008000c9  008000c9  00000250  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000250  2**0
                  CONTENTS
  5 .debug_aranges 00000014  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000a4  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000147  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000079  00000000  00000000  0000044f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001ba  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d1  00000000  00000000  00000682  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16
   2:	22 c0       	rjmp	.+68     	; 0x48
   4:	21 c0       	rjmp	.+66     	; 0x48
   6:	20 c0       	rjmp	.+64     	; 0x48
   8:	3c c0       	rjmp	.+120    	; 0x82
   a:	1e c0       	rjmp	.+60     	; 0x48
   c:	1d c0       	rjmp	.+58     	; 0x48
   e:	6f c0       	rjmp	.+222    	; 0xee
  10:	1b c0       	rjmp	.+54     	; 0x48
  12:	1a c0       	rjmp	.+52     	; 0x48
  14:	19 c0       	rjmp	.+50     	; 0x48

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	ec eb       	ldi	r30, 0xBC	; 188
  26:	f1 e0       	ldi	r31, 0x01	; 1
  28:	03 c0       	rjmp	.+6      	; 0x30

0000002a <.do_copy_data_loop>:
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0

00000030 <.do_copy_data_start>:
  30:	a0 36       	cpi	r26, 0x60	; 96
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a9 3c       	cpi	r26, 0xC9	; 201
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e
  46:	01 c0       	rjmp	.+2      	; 0x4a

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0

0000004a <main>:



int main (void)
{
  4a:	cf ed       	ldi	r28, 0xDF	; 223
  4c:	d0 e0       	ldi	r29, 0x00	; 0
  4e:	de bf       	out	0x3e, r29	; 62
  50:	cd bf       	out	0x3d, r28	; 61
 cli();
  52:	f8 94       	cli
  //Setup Ports
 DDRB = 0xFF;									//Set Port B as Output
  54:	8f ef       	ldi	r24, 0xFF	; 255
  56:	87 bb       	out	0x17, r24	; 23
  //Setup UART
 UBRR = (char)UART_BAUD_SELECT;
  58:	8e e0       	ldi	r24, 0x0E	; 14
  5a:	89 b9       	out	0x09, r24	; 9
 UCR = 0x98;	 								//enable Rx, Rx IQR & Tx
  5c:	88 e9       	ldi	r24, 0x98	; 152
  5e:	8a b9       	out	0x0a, r24	; 10
  //Setup Timer
 TCCR1A = 0x00;
  60:	1f bc       	out	0x2f, r1	; 47
 TCCR1B = 0x09;									//dirrect ck & CTC1 enable
  62:	89 e0       	ldi	r24, 0x09	; 9
  64:	8e bd       	out	0x2e, r24	; 46
 OCR1 = 2304;									//250uS Frame
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	99 e0       	ldi	r25, 0x09	; 9
  6a:	9b bd       	out	0x2b, r25	; 43
  6c:	8a bd       	out	0x2a, r24	; 42
 TIMSK = 0x40;									//Enable OC1 IRQ
  6e:	80 e4       	ldi	r24, 0x40	; 64
  70:	89 bf       	out	0x39, r24	; 57
 
 channels = 48;									//Defualt number of channels
  72:	80 e3       	ldi	r24, 0x30	; 48
  74:	80 93 c5 00 	sts	0x00C5, r24
 maxfield = 96;
  78:	80 e6       	ldi	r24, 0x60	; 96
  7a:	80 93 62 00 	sts	0x0062, r24
 sei();
  7e:	78 94       	sei
 for (;;);
  80:	ff cf       	rjmp	.-2      	; 0x80

00000082 <__vector_4>:
}


SIGNAL(SIG_OUTPUT_COMPARE1A)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31
 if (field > maxfield) {						//Test for end of channels
  94:	90 91 c6 00 	lds	r25, 0x00C6
  98:	80 91 62 00 	lds	r24, 0x0062
  9c:	89 17       	cp	r24, r25
  9e:	70 f4       	brcc	.+28     	; 0xbc
 	if (syncntr <= 18) {						//Build channel 0 5ms sync pulse
  a0:	80 91 c7 00 	lds	r24, 0x00C7
  a4:	83 31       	cpi	r24, 0x13	; 19
  a6:	28 f4       	brcc	.+10     	; 0xb2
 		syncntr++;
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	80 93 c7 00 	sts	0x00C7, r24
 		PORTB = synclevel;
  ae:	18 ba       	out	0x18, r1	; 24
 		return;
  b0:	15 c0       	rjmp	.+42     	; 0xdc
 	}
 	field = 0;									//Reset 1/2 channel counter
  b2:	10 92 c6 00 	sts	0x00C6, r1
 	syncntr = 0;								//Reset 5ms sync pulse counter
  b6:	10 92 c7 00 	sts	0x00C7, r1
  ba:	10 c0       	rjmp	.+32     	; 0xdc
 }
 else {
 	if (!(field & 0x01)) 
  bc:	90 fd       	sbrc	r25, 0
  be:	02 c0       	rjmp	.+4      	; 0xc4
		PORTB = synclevel;						//DAC is Synclevel if field = even 
  c0:	18 ba       	out	0x18, r1	; 24
  c2:	09 c0       	rjmp	.+18     	; 0xd6
 	else 
		PORTB = channel [(field >> 1)] + offlevel; //DAC is channel data if field = odd
  c4:	89 2f       	mov	r24, r25
  c6:	86 95       	lsr	r24
  c8:	e8 2f       	mov	r30, r24
  ca:	ff 27       	eor	r31, r31
  cc:	ed 59       	subi	r30, 0x9D	; 157
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	80 81       	ld	r24, Z
  d2:	80 5a       	subi	r24, 0xA0	; 160
  d4:	88 bb       	out	0x18, r24	; 24
 	field++;
  d6:	9f 5f       	subi	r25, 0xFF	; 255
  d8:	90 93 c6 00 	sts	0x00C6, r25
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_7>:
 }
}


SIGNAL(SIG_UART_RECV)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
 data = UDR;
 106:	8c b1       	in	r24, 0x0c	; 12
 108:	80 93 c4 00 	sts	0x00C4, r24
 if (data >= 0xA7) {
 10c:	87 3a       	cpi	r24, 0xA7	; 167
 10e:	60 f0       	brcs	.+24     	; 0x128
 	if (data == 0xAA) {						//Address Command
 110:	8a 3a       	cpi	r24, 0xAA	; 170
 112:	21 f4       	brne	.+8      	; 0x11c
 		addrflag = 1;							//Set Flag for next RX Byte = address
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 c8 00 	sts	0x00C8, r24
 		return;
 11a:	44 c0       	rjmp	.+136    	; 0x1a4
 	}
 	if (data == 0xA7) {						//Channel Length Program Command
 11c:	87 3a       	cpi	r24, 0xA7	; 167
 11e:	21 f4       	brne	.+8      	; 0x128
 		chlength = 1;							//Set Flag for next RX Byte = # of channels
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 61 00 	sts	0x0061, r24
 		return;
 126:	3e c0       	rjmp	.+124    	; 0x1a4
 	}
 }
 if (addrflag == 1) {
 128:	80 91 c8 00 	lds	r24, 0x00C8
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	59 f4       	brne	.+22     	; 0x146
 	addrflag = 0;
 130:	10 92 c8 00 	sts	0x00C8, r1
 	if (data < channels) 
 134:	90 91 c4 00 	lds	r25, 0x00C4
 138:	80 91 c5 00 	lds	r24, 0x00C5
 13c:	98 17       	cp	r25, r24
 13e:	90 f5       	brcc	.+100    	; 0x1a4
		address = data;							//Set address
 140:	90 93 60 00 	sts	0x0060, r25
 	return;
 144:	2f c0       	rjmp	.+94     	; 0x1a4
 }
 if (chlength == 1) {
 146:	80 91 61 00 	lds	r24, 0x0061
 14a:	90 91 c4 00 	lds	r25, 0x00C4
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	79 f4       	brne	.+30     	; 0x170
  	chlength = 0;
 152:	10 92 61 00 	sts	0x0061, r1
 	if (data < 6 || data > maxch) 				//Test for valid # of channels
 156:	89 2f       	mov	r24, r25
 158:	86 50       	subi	r24, 0x06	; 6
 15a:	8b 35       	cpi	r24, 0x5B	; 91
 15c:	18 f5       	brcc	.+70     	; 0x1a4
		return;								
 	channels = data;							//Program # of channels
 15e:	90 93 c5 00 	sts	0x00C5, r25
 	maxfield = data * 2; 						//Program # of fields
 162:	89 2f       	mov	r24, r25
 164:	99 27       	eor	r25, r25
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	80 93 62 00 	sts	0x0062, r24
 	return;
 16e:	1a c0       	rjmp	.+52     	; 0x1a4
 }
 if (data > maxlevel) 
 170:	90 3a       	cpi	r25, 0xA0	; 160
 172:	18 f0       	brcs	.+6      	; 0x17a
	data = maxlevel;							//Cap top level
 174:	8f e9       	ldi	r24, 0x9F	; 159
 176:	80 93 c4 00 	sts	0x00C4, r24
 channel[address] = data;						//Load channel value into array
 17a:	40 91 60 00 	lds	r20, 0x0060
 17e:	24 2f       	mov	r18, r20
 180:	33 27       	eor	r19, r19
 182:	f3 2f       	mov	r31, r19
 184:	e2 2f       	mov	r30, r18
 186:	ed 59       	subi	r30, 0x9D	; 157
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	80 91 c4 00 	lds	r24, 0x00C4
 18e:	80 83       	st	Z, r24
 if (address < channels - 1) 
 190:	80 91 c5 00 	lds	r24, 0x00C5
 194:	99 27       	eor	r25, r25
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	28 17       	cp	r18, r24
 19a:	39 07       	cpc	r19, r25
 19c:	1c f4       	brge	.+6      	; 0x1a4
	address++;									//Auto Increment address if not at max
 19e:	4f 5f       	subi	r20, 0xFF	; 255
 1a0:	40 93 60 00 	sts	0x0060, r20
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti
